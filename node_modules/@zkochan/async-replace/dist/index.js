'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _babelRunAsync = require('babel-run-async');

var _babelRunAsync2 = _interopRequireDefault(_babelRunAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _babelRunAsync2.default.cb(function (str, regexp, replacer, done) {
  return asyncReplace(str, regexp, replacer, done);
});

/**
 * Replaces instances of the regex in str using the asynchronous callback function, replacer
 *
 * @param {string} str The string to be matched
 * @param {RegExp} regexp The regex object to execute.
 * @param {function} replacer The asynchronous callback function called to translate matches into replacements
 * @param {function} done The callback function invoked on completion or error
 *
 * The replacer callback should take two parameters (match, callback). match is the result from regex.exec(), including capturing groups.
 *  callback should be invoked with (err, replacement_value) when done.
 *
 * The done callback will be invoked with (err, result) once all replacements have been processed.
 *
 */

function asyncReplace(str, regexp, replacer, done, prev) {
  prev = prev || 0;
  regexp.lastIndex = 0;
  var match = regexp.exec(str);
  if (match == null) {
    return done(null, str);
  }
  _babelRunAsync2.default.cb(replacer, next).apply(undefined, (0, _toConsumableArray3.default)(match).concat([prev + match.index, str]));

  function next(err, result) {
    if (err) {
      return done(err, result);
    }
    var matchIndex = match.index;
    var matchLength = match[0].length;
    // Splice the replacement back into the string
    var accum = str.substring(0, matchIndex) + result;
    var rest = str.substring(matchIndex + matchLength);
    if (regexp.global) {
      return asyncReplace(rest, regexp, replacer, function (err, remaining) {
        return done(err, accum + remaining);
      }, prev + matchIndex + matchLength);
    }
    done(null, accum + rest);
  }
}
module.exports = exports['default'];