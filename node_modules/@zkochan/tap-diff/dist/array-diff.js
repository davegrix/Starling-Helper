'use strict';

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var diff = require('diff');

module.exports = function (arr1, arr2, equals) {
  var count = 0;
  var uniqueId = function uniqueId() {
    return '' + ++count;
  };

  // Convert from arrays to strings because jsdiff can only deal with strings
  var idMap = new _map2.default();
  var valueMap = new _map2.default();

  var addId = function addId(elem) {
    var id = uniqueId();
    idMap.set(elem, id);
    valueMap.set(id, elem);
    return id;
  };
  var convertToString = function convertToString(arr) {
    var string = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var elem = _step.value;

        var id = undefined;
        if (equals === undefined || equals === null) {
          if (!idMap.has(elem)) {
            id = addId(elem);
          } else {
            id = idMap.get(elem);
          }
        } else {
          var contains = false;
          idMap.forEach(function (value, key, map) {
            if (equals(key, elem)) {
              id = value;
              contains = true;
            }
          });
          if (!contains) {
            id = addId(elem);
          }
        }
        string += id + '\n';
      };

      for (var _iterator = (0, _getIterator3.default)(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return string;
  };

  var string1 = convertToString(arr1);
  var string2 = convertToString(arr2);

  // Calculate the difference between two strings
  var d = diff.diffLines(string1, string2);

  var retval = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (0, _getIterator3.default)(d), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var delta = _step2.value;

      var ids = delta.value.split('\n').filter(function (elem, index, array) {
        return elem !== '';
      });
      var elems = ids.map(function (elem, index, array) {
        return valueMap.get(elem);
      });

      if (delta.added) {
        retval.push({
          added: true,
          removed: undefined,
          value: elems
        });
      } else if (delta.removed) {
        retval.push({
          added: undefined,
          removed: true,
          value: elems
        });
      } else {
        retval.push({
          value: elems
        });
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return retval;
};