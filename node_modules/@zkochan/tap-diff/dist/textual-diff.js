'use strict';

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var diff = require('diff');

module.exports = function (lhs, rhs) {
  var result = [];

  var getString = function getString(str) {
    return str == null || str == undefined ? "" : str;
  };
  var addDelta = function addDelta(delta) {
    delete delta["count"];
    result.push(delta);
  };

  var lhs_ = getString(lhs);
  var rhs_ = getString(rhs);
  var lineDiff = diff.diffLines(lhs_, rhs_);
  var index = 0;
  while (index < lineDiff.length) {
    var delta1 = lineDiff[index];
    if (index < lineDiff.length - 1) {
      var delta2 = lineDiff[index + 1];

      if (delta1.removed && delta2.added) {
        var useLineDiffFlag = false;

        // Decide whether word diff is used
        if (delta1.count == delta2.count) {
          var wordDiff = diff.diffWords(delta1.value, delta2.value, {
            ignoreWhitespace: false
          });

          // Might use word diff when number of lines of original and revised texts are same.
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (0, _getIterator3.default)(wordDiff), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _delta = _step.value;

              if ((_delta.added || _delta.removed) && ~_delta.value.indexOf('\n')) {
                useLineDiffFlag = true;
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (!useLineDiffFlag) {
            // Use word diff
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = (0, _getIterator3.default)(wordDiff), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var delta = _step2.value;

                addDelta(delta);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } else {
          var lines1 = delta1.value.split("\n");
          var lines2 = delta2.value.split("\n");

          var maxLineNum = Math.max(lines1.length - 1, lines2.length - 1);
          var diffMap = [];

          var added = true;
          var removed = true;

          for (var i = 0; i < maxLineNum; i++) {
            if (i < lines1.length - 1) {
              var line1 = lines1[i];
              if (i < lines2.length - 1) {
                var line2 = lines2[i];
                var _wordDiff = diff.diffWords(line1, line2);
                _wordDiff.push({ value: "\n" });
                diffMap.push(_wordDiff);

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = (0, _getIterator3.default)(_wordDiff), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _delta2 = _step3.value;

                    if (_delta2.added) removed = false;
                    if (_delta2.removed) added = false;
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              } else {
                diffMap.push([{
                  added: undefined,
                  removed: true,
                  value: line1 + "\n"
                }]);

                added = false;
              }
            } else {
              var _line = lines2[i];
              diffMap.push([{
                added: true,
                removed: undefined,
                value: _line + "\n"
              }]);

              removed = false;
            }

            if (!added && !removed) break;
          }
          if (added || removed) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = (0, _getIterator3.default)(diffMap), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _diff = _step4.value;
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                  for (var _iterator5 = (0, _getIterator3.default)(_diff), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _delta3 = _step5.value;

                    addDelta(_delta3);
                  }
                } catch (err) {
                  _didIteratorError5 = true;
                  _iteratorError5 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                      _iterator5.return();
                    }
                  } finally {
                    if (_didIteratorError5) {
                      throw _iteratorError5;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          } else {
            useLineDiffFlag = true;
          }
        }

        if (useLineDiffFlag) {
          // Use line diff
          addDelta(delta1);
          addDelta(delta2);
        }

        index += 2;
      } else {
        addDelta(delta1);

        index += 1;
      }
    } else {
      addDelta(delta1);

      index += 1;
    }
  }

  return result;
};