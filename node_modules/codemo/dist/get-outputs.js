'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = getOutputs;

var fs = require('fs');
var spawn = require('cross-spawn-async');
var path = require('path');
var normalizePath = require('normalize-path');
var hookConsoleLog = require('./hook-console-log');

function getOutputs(opts) {
  var tmpFileName = normalizePath(path.resolve(opts.cwd, '_' + Math.random() + '.js'));
  fs.writeFileSync(tmpFileName, hookConsoleLog.addHook({
    code: opts.code,
    filePath: tmpFileName
  }), 'utf8');

  return new _promise2.default(function (resolve, reject) {
    var outputs = [];
    var failed = false;

    var cp = spawn('node', [tmpFileName]);
    cp.stdout.setEncoding('utf8');
    cp.stdout.on('data', function (data) {
      try {
        data.split(hookConsoleLog.messageSplitter).filter(function (outputJSON) {
          return !!outputJSON;
        }).map(function (outputJSON) {
          return JSON.parse(outputJSON);
        }).forEach(function (outputInfo) {
          return outputs.push(outputInfo);
        });
      } catch (err) {
        failed = true;
        reject(err);
      }
    });
    var errData = '';

    cp.stderr.setEncoding('utf8');
    cp.stderr.on('data', function (data) {
      errData += data;
    });

    cp.on('close', function () {
      fs.unlinkSync(tmpFileName);

      if (failed) {
        return;
      }

      if (errData) {
        return reject(new Error(errData));
      }

      return resolve(outputs);
    });
  });
}