'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  process: codemoProcess,
  processFile: processFile
};

var path = require('path');
var stdoutToDemo = require('./stdout-to-demo');
var fs = require('fs');
var rollup = require('rollup');
var babel = require('rollup-plugin-babel');
var includePaths = require('rollup-plugin-includepaths');

function codemoProcess(code, opts) {
  opts = opts || {};
  var cwd = opts.cwd || process.cwd();

  if (!opts.es6) {
    return stdoutToDemo({ code: code, cwd: cwd });
  }

  var tmpFileName = path.resolve(cwd, Math.random() + '.js');
  return new _promise2.default(function (resolve, reject) {
    fs.write(tmpFileName, code, 'utf8', function (err) {
      if (err) {
        return reject(err);
      }

      processFile(tmpFileName, opts).then(function (md) {
        cleanUp();
        resolve(md);
      }).catch(function (err) {
        cleanUp();
        reject(err);
      });

      function cleanUp() {
        try {
          fs.unlinkSync(tmpFileName);
        } catch (err) {
          console.log(err);
        }
      }
    });
  });
}

function processFile(filePath, opts) {
  opts = opts || {};

  if (!opts.es6) {
    return new _promise2.default(function (resolve, reject) {
      fs.readFile(filePath, 'utf8', function (err, code) {
        if (err) return reject(err);

        codemoProcess(code, { cwd: path.dirname(filePath) }).then(resolve).catch(reject);
      });
    });
  }

  return rollup.rollup({
    entry: filePath,
    plugins: [includePaths({
      paths: [path.dirname(filePath)]
    }), babel({
      exclude: 'node_modules/**'
    })]
  }).then(function (bundle) {
    return bundle.generate({
      format: 'cjs',
      sourceMap: true
    });
  }).then(function (result) {
    return stdoutToDemo((0, _assign2.default)({}, result, {
      cwd: path.dirname(filePath)
    }));
  });
}