'use strict';

require('core-js/fn/array/fill');

var describe = require('mocha').describe;
var it = require('mocha').it;
var expect = require('chai').expect;

var stdoutToDemo = require('./stdout-to-demo');

describe('stdoutToDemo', function () {
  it('should add the console output to the comments', function () {
    return stdoutToDemo('console.log("Hello world!")').then(function (actual) {
      return expect(actual).to.eq('console.log("Hello world!")\n//> Hello world!');
    });
  });

  it('should add the console output to the comments when the code executed asynchronously', function () {
    return stdoutToDemo('setTimeout(function () { console.log("Hello world!") }, 0)').then(function (actual) {
      return expect(actual).to.eq('setTimeout(function () { console.log("Hello world!") }, 0)\n//> Hello world!');
    });
  });

  it('should add the multiline console output to the comments', function () {
    return stdoutToDemo('console.log("Hello world!\\nHello world!")').then(function (actual) {
      return expect(actual).to.eq(['console.log("Hello world!\\nHello world!")', '//> Hello world!', '//  Hello world!'].join('\n'));
    });
  });

  it('should add several console outputs printed by the same line to the comments', function () {
    return stdoutToDemo('"use strict";for (var i = 3; i--;) console.log("Hello world!")').then(function (actual) {
      return expect(actual).to.eq('"use strict";for (var i = 3; i--;) console.log("Hello world!")\n//> Hello world!\n//> Hello world!\n//> Hello world!');
    });
  });

  it('should add several console outputs printed by different lines', function () {
    return stdoutToDemo(['console.log("foo")', 'console.log("bar")'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['console.log("foo")', '//> foo', 'console.log("bar")', '//> bar'].join('\n'));
    });
  });

  it('should add the JSON console output to the comments', function () {
    return stdoutToDemo('console.log({foo: "bar"})').then(function (actual) {
      return expect(actual).to.eq('console.log({foo: "bar"})\n//> { foo: \'bar\' }');
    });
  });

  it('should add the console output immediately after console.log', function () {
    return stdoutToDemo(['function foo (a) {', '  console.log(a)', '  console.log(a + "\\n" + a)', '}', 'foo("Hello world!")'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['function foo (a) {', '  console.log(a)', '  //> Hello world!', '  console.log(a + "\\n" + a)', '  //> Hello world!', '  //  Hello world!', '}', 'foo("Hello world!")'].join('\n'));
    });
  });

  it('should work with windows new lines', function () {
    return stdoutToDemo(['function foo (a) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '  console.log(a)', '}', 'foo("Hello world!")'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['function foo (a) {\n\n\n\n\n\n\n\n\n\n\n\n', '  console.log(a)', '  //> Hello world!', '}', 'foo("Hello world!")'].join('\n'));
    });
  });

  it('should add the console output after the multiline console log statement', function () {
    return stdoutToDemo(['console.log([', '  1,', '  2,', '])'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['console.log([', '  1,', '  2,', '])', '//> [ 1, 2 ]'].join('\n'));
    });
  });

  it('should add the console output after the multiline console log statement #2', function () {
    return stdoutToDemo(['console.log(', '  "foo"', ')'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['console.log(', '  "foo"', ')', '//> foo'].join('\n'));
    });
  });

  it('should add multiple outputs from the same line below', function () {
    return stdoutToDemo(['for (var i = 0; i < 2; i++) {', '  console.log("Hello world!")', '}'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['for (var i = 0; i < 2; i++) {', '  console.log("Hello world!")', Array(2).fill('  //> Hello world!').join('\n'), '}'].join('\n'));
    });
  });

  it('should parse properly glued output from child process', function () {
    return stdoutToDemo(['for (var i = 0; i < 100; i++) {', '  console.log("Hello world!")', '}'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['for (var i = 0; i < 100; i++) {', '  console.log("Hello world!")', Array(100).fill('  //> Hello world!').join('\n'), '}'].join('\n'));
    });
  });

  it('should output multiline results', function () {
    return stdoutToDemo(['console.log(JSON.stringify({ foo: 1, bar: 2 }, null, 2))'].join('\n')).then(function (actual) {
      return expect(actual).to.eq(['console.log(JSON.stringify({ foo: 1, bar: 2 }, null, 2))', '//> {', '//    "foo": 1,', '//    "bar": 2', '//  }'].join('\n'));
    });
  });

  it('should output syntax error', function (done) {
    stdoutToDemo('+="').catch(function (err) {
      expect(err).to.be.instanceOf(Error);
      expect(err.message).to.match(/SyntaxError: Unexpected token \+=/);
      done();
    });
  });

  it('should add earlier output even if it was printed later', function (done) {
    return stdoutToDemo(['setTimeout(function () {console.log("1Hello world!")}, 1)', '', 'console.log("2Hello world!")'].join('\n')).then(function (actual) {
      expect(actual).to.eq(['setTimeout(function () {console.log("1Hello world!")}, 1)', '//> 1Hello world!', '', 'console.log("2Hello world!")', '//> 2Hello world!'].join('\n'));
      done();
    }).catch(done);
  });
});