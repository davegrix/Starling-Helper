'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = markdownScript;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function popChildren(args) {
  return args[args.length - 1] instanceof Array ? args.pop() : undefined;
}

function markdownScript(type) {
  var node = {};

  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var children = popChildren(args);
  if (children) {
    node.children = children.map(function (child) {
      if (typeof child === 'string') return markdownScript.text({ value: child });
      return child;
    }).reduce(function (merged, child) {
      if (child.type === 'text' && merged.length && merged[merged.length - 1].type === 'text') {
        merged[merged.length - 1].value += child.value;
        return merged;
      }
      return [].concat((0, _toConsumableArray3.default)(merged), [child]);
    }, []);
  }
  var attributes = args.shift() || {};
  return (0, _extends3.default)({
    type: type
  }, node, attributes);
}

var types = ['thematicBreak', 'html', 'yaml', 'table', 'tableCell', 'tableRow', 'tableRow', 'paragraph', 'text', 'code', 'list', 'listItem', 'definition', 'footnoteDefinition', 'heading', 'blockquote', 'link', 'image', 'footnote', 'strong', 'emphasis', 'delete', 'inlineCode', 'break', 'root'];

types.forEach(function (type) {
  markdownScript[type] = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return markdownScript.apply(undefined, [type].concat(args));
  };
});[1, 2, 3, 4, 5, 6].forEach(function (depth) {
  markdownScript['h' + depth] = function () {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var children = popChildren(args);
    var attributes = (0, _extends3.default)({}, args.shift() || {}, {
      depth: depth
    });
    var newargs = ['heading', attributes];
    if (children) newargs.push(children);
    return markdownScript.apply(undefined, newargs);
  };
});
module.exports = exports['default'];