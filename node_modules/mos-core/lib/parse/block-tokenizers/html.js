'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tokenizeHTML;

var _htmlComment = require('../eat/html-comment');

var _htmlComment2 = _interopRequireDefault(_htmlComment);

var _htmlCdata = require('../eat/html-cdata');

var _htmlCdata2 = _interopRequireDefault(_htmlCdata);

var _htmlProcessingInstructions = require('../eat/html-processing-instructions');

var _htmlProcessingInstructions2 = _interopRequireDefault(_htmlProcessingInstructions);

var _htmlDeclaration = require('../eat/html-declaration');

var _htmlDeclaration2 = _interopRequireDefault(_htmlDeclaration);

var _htmlClosingTag = require('../eat/html-closing-tag');

var _htmlClosingTag2 = _interopRequireDefault(_htmlClosingTag);

var _htmlOpeningTag = require('../eat/html-opening-tag');

var _htmlOpeningTag2 = _interopRequireDefault(_htmlOpeningTag);

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MIN_CLOSING_HTML_NEWLINE_COUNT = 2;

/**
 * Tokenise HTML.
 *
 * @example
 *   tokenizeHTML(eat, '<span>foo</span>');
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `html` node.
 */
function tokenizeHTML(parser, value, silent) {
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var offset = void 0;
  var lineCount = void 0;
  var character = void 0;
  var queue = void 0;

  /*
   * Eat initial spacing.
   */

  while (index < length) {
    character = value.charAt(index);

    if (character !== '\t' && character !== ' ') {
      break;
    }

    subvalue += character;
    index++;
  }

  offset = index;
  value = value.slice(offset);

  /*
   * Try to eat an HTML thing.
   */

  queue = (0, _htmlComment2.default)(value, parser.options) || (0, _htmlCdata2.default)(value) || (0, _htmlProcessingInstructions2.default)(value) || (0, _htmlDeclaration2.default)(value) || (0, _htmlClosingTag2.default)(value, true) || (0, _htmlOpeningTag2.default)(value, true);

  if (!queue) {
    return;
  }

  if (silent) {
    return true;
  }

  subvalue += queue;
  index = subvalue.length - offset;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === '\n') {
      queue += character;
      lineCount++;
    } else if (queue.length < MIN_CLOSING_HTML_NEWLINE_COUNT) {
      subvalue += queue + character;
      queue = '';
    } else {
      break;
    }

    index++;
  }

  return parser.eat(subvalue)({
    type: _nodeTypes2.default.HTML,
    value: subvalue
  });
}
module.exports = exports['default'];