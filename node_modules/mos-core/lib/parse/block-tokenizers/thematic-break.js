'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tokenizeThematicBreak;

var _sharedConstants = require('../shared-constants');

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var THEMATIC_BREAK_MARKER_COUNT = 3;

/**
 * Tokenise a horizontal rule.
 *
 * @example
 *   tokenizeThematicBreak(eat, '***');
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `thematicBreak` node.
 */
function tokenizeThematicBreak(parser, value, silent) {
  var index = -1;
  var length = value.length + 1;
  var subvalue = '';
  var character = void 0;
  var marker = void 0;
  var markerCount = void 0;
  var queue = void 0;

  while (++index < length) {
    character = value.charAt(index);

    if (character !== '\t' && character !== ' ') {
      break;
    }

    subvalue += character;
  }

  if (_sharedConstants.RULE_MARKERS[character] !== true) {
    return;
  }

  marker = character;
  subvalue += character;
  markerCount = 1;
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === marker) {
      markerCount++;
      subvalue += queue + marker;
      queue = '';
    } else if (character === ' ') {
      queue += character;
    } else if (markerCount >= THEMATIC_BREAK_MARKER_COUNT && (!character || character === '\n')) {
      subvalue += queue;

      if (silent) {
        return true;
      }

      return parser.eat(subvalue)({
        type: _nodeTypes2.default.THEMATIC_BREAK
      });
    } else {
      return;
    }
  }
}
module.exports = exports['default'];