'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tokenizeYAMLFrontMatter;

var _repeatString = require('repeat-string');

var _repeatString2 = _interopRequireDefault(_repeatString);

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var YAML_FENCE = (0, _repeatString2.default)('-', 3);


/**
 * Tokenise YAML front matter.
 *
 * @example
 *   tokenizeYAMLFrontMatter(eat, '---\nfoo: bar\n---');
 *
 * @property {boolean} onlyAtStart
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `yaml` node.
 */
function tokenizeYAMLFrontMatter(parser, value, silent) {
  var subvalue = void 0;
  var content = void 0;
  var index = void 0;
  var length = void 0;
  var character = void 0;
  var queue = void 0;

  if (!parser.options.yaml || value.charAt(0) !== '-' || value.charAt(1) !== '-' || value.charAt(2) !== '-' || value.charAt(3) !== '\n') {
    return;
  }

  subvalue = YAML_FENCE + '\n';
  content = queue = '';
  index = 3;
  length = value.length;

  while (++index < length) {
    character = value.charAt(index);

    if (character === '-' && (queue || !content) && value.charAt(index + 1) === '-' && value.charAt(index + 2) === '-') {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      subvalue += queue + YAML_FENCE;

      return parser.eat(subvalue)({
        type: _nodeTypes2.default.YAML,
        value: content
      });
    }

    if (character === '\n') {
      queue += character;
    } else {
      subvalue += queue + character;
      content += queue + character;
      queue = '';
    }
  }
}

tokenizeYAMLFrontMatter.onlyAtStart = true;
module.exports = exports['default'];