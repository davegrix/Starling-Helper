'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isWhiteSpace = require('../is-white-space');

var _isWhiteSpace2 = _interopRequireDefault(_isWhiteSpace);

var _isAlphabetic = require('../is-alphabetic');

var _isAlphabetic2 = _interopRequireDefault(_isAlphabetic);

var _isNumeric = require('../is-numeric');

var _isNumeric2 = _interopRequireDefault(_isNumeric);

var _trim = require('trim');

var _trim2 = _interopRequireDefault(_trim);

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = tokenizeEmphasis;


/*
 * A map of characters, which can be used to mark emphasis.
 */

var EMPHASIS_MARKERS = {};

EMPHASIS_MARKERS['*'] = true;
EMPHASIS_MARKERS['_'] = true;

/**
 * Check whether `character` is a word character.
 *
 * @param {string} character - Single character to check.
 * @return {boolean} - Whether `character` is a word
 *   character.
 */
function isWordCharacter(character) {
  return character === '_' || (0, _isAlphabetic2.default)(character) || (0, _isNumeric2.default)(character);
}

/**
 * Find possible slight emphasis.
 *
 * @example
 *   locateEmphasis('foo *bar'); // 4
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location of possible slight emphasis.
 */
function locateEmphasis(parser, value, fromIndex) {
  var asterisk = value.indexOf('*', fromIndex);
  var underscore = value.indexOf('_', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

/**
 * Tokenise slight emphasis.
 *
 * @example
 *   tokenizeEmphasis(eat, '*foo*');
 *   tokenizeEmphasis(eat, '_foo_');
 *
 * @property {Function} locator - Slight emphasis locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `emphasis` node.
 */
function tokenizeEmphasis(parser, value, silent) {
  var index = 0;
  var character = value.charAt(index);
  var now = void 0;
  var pedantic = void 0;
  var marker = void 0;
  var queue = void 0;
  var subvalue = void 0;
  var length = void 0;
  var prev = void 0;

  if (EMPHASIS_MARKERS[character] !== true) {
    return;
  }

  pedantic = parser.options.pedantic;
  subvalue = marker = character;
  length = value.length;
  index++;
  queue = character = '';

  if (pedantic && (0, _isWhiteSpace2.default)(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && (!pedantic || !(0, _isWhiteSpace2.default)(prev))) {
      character = value.charAt(++index);

      if (character !== marker) {
        if (!(0, _trim2.default)(queue) || prev === marker) {
          return;
        }

        if (pedantic || marker !== '_' || !isWordCharacter(character)) {
          /* istanbul ignore if - never used (yet) */
          if (silent) {
            return true;
          }

          now = parser.eat.now();
          now.column++;
          now.offset++;

          return parser.eat(subvalue + queue + marker)(parser.renderInline(_nodeTypes2.default.EMPHASIS, queue, now));
        }
      }

      queue += marker;
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

tokenizeEmphasis.locator = locateEmphasis;
module.exports = exports['default'];