'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _trim = require('trim');

var _trim2 = _interopRequireDefault(_trim);

var _isWhiteSpace = require('../is-white-space');

var _isWhiteSpace2 = _interopRequireDefault(_isWhiteSpace);

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = tokenizeStrong;


/*
 * A map of characters, which can be used to mark emphasis.
 */

var EMPHASIS_MARKERS = {};

EMPHASIS_MARKERS['*'] = true;
EMPHASIS_MARKERS['_'] = true;

/**
 * Find a possible strong emphasis.
 *
 * @example
 *   locateStrong('foo **bar') // 4
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location of possible strong emphasis.
 */
function locateStrong(parser, value, fromIndex) {
  var asterisk = value.indexOf('**', fromIndex);
  var underscore = value.indexOf('__', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

/**
 * Tokenise strong emphasis.
 *
 * @example
 *   tokenizeStrong(eat, '**foo**')
 *   tokenizeStrong(eat, '__foo__')
 *
 * @property {Function} locator - Strong emphasis locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `strong` node.
 */
function tokenizeStrong(parser, value, silent) {
  var index = 0;
  var character = value.charAt(index);

  if (EMPHASIS_MARKERS[character] !== true || value.charAt(++index) !== character) {
    return;
  }

  var pedantic = parser.options.pedantic;
  var marker = character;
  var subvalue = marker + marker;
  var length = value.length;
  index++;
  var queue = character = '';

  if (pedantic && (0, _isWhiteSpace2.default)(value.charAt(index))) {
    return;
  }

  var prev = void 0;
  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && value.charAt(index + 1) === marker && (!pedantic || !(0, _isWhiteSpace2.default)(prev))) {
      character = value.charAt(index + 2);

      if (character !== marker) {
        if (!(0, _trim2.default)(queue)) {
          return;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        var now = parser.eat.now();
        now.column += 2;
        now.offset += 2;

        return parser.eat(subvalue + queue + subvalue)(parser.renderInline(_nodeTypes2.default.STRONG, queue, now));
      }
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

tokenizeStrong.locator = locateStrong;
module.exports = exports['default'];