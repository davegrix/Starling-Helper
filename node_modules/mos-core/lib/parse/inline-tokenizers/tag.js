'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _htmlComment = require('../eat/html-comment');

var _htmlComment2 = _interopRequireDefault(_htmlComment);

var _htmlCdata = require('../eat/html-cdata');

var _htmlCdata2 = _interopRequireDefault(_htmlCdata);

var _htmlProcessingInstructions = require('../eat/html-processing-instructions');

var _htmlProcessingInstructions2 = _interopRequireDefault(_htmlProcessingInstructions);

var _htmlDeclaration = require('../eat/html-declaration');

var _htmlDeclaration2 = _interopRequireDefault(_htmlDeclaration);

var _htmlClosingTag = require('../eat/html-closing-tag');

var _htmlClosingTag2 = _interopRequireDefault(_htmlClosingTag);

var _htmlOpeningTag = require('../eat/html-opening-tag');

var _htmlOpeningTag2 = _interopRequireDefault(_htmlOpeningTag);

var _nodeTypes = require('../node-types');

var _nodeTypes2 = _interopRequireDefault(_nodeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EXPRESSION_HTML_LINK_OPEN = /^<a /i;
var EXPRESSION_HTML_LINK_CLOSE = /^<\/a>/i;

/**
 * Find a possible tag.
 *
 * @example
 *   locateTag('foo <bar') // 4
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location of possible tag.
 */
function locateTag(parser, value, fromIndex) {
  return value.indexOf('<', fromIndex);
}

/**
 * Tokenise an HTML tag.
 *
 * @example
 *   tokenizeTag(eat, '<span foo="bar">')
 *
 * @property {Function} locator - Tag locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `html` node.
 */
function tokenizeTag(parser, value, silent) {
  var subvalue = (0, _htmlComment2.default)(value, parser.options) || (0, _htmlCdata2.default)(value) || (0, _htmlProcessingInstructions2.default)(value) || (0, _htmlDeclaration2.default)(value) || (0, _htmlClosingTag2.default)(value) || (0, _htmlOpeningTag2.default)(value);

  if (!subvalue) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  if (!parser.state.inLink && EXPRESSION_HTML_LINK_OPEN.test(subvalue)) {
    parser.state.inLink = true;
  } else if (parser.state.inLink && EXPRESSION_HTML_LINK_CLOSE.test(subvalue)) {
    parser.state.inLink = false;
  }

  return parser.eat(subvalue)({
    type: _nodeTypes2.default.HTML,
    value: subvalue
  });
}

tokenizeTag.locator = locateTag;

exports.default = tokenizeTag;
module.exports = exports['default'];