'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _utilities = require('../utilities');

var _defaults = require('../defaults');

var _encodeFactory = require('./encode-factory');

var _encodeFactory2 = _interopRequireDefault(_encodeFactory);

var _escapeFactory = require('./escape-factory');

var _escapeFactory2 = _interopRequireDefault(_escapeFactory);

var _listBullets = require('./list-bullets');

var _listBullets2 = _interopRequireDefault(_listBullets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Construct a state `toggler`: a function which inverses
 * `property` in context based on its current value.
 * The by `toggler` returned function restores that value.
 *
 * @example
 *   var context = {};
 *   var key = 'foo';
 *   var val = true;
 *   context[key] = val;
 *   context.enter = stateToggler(key, val);
 *   context[key]; // true
 *   var exit = context.enter();
 *   context[key]; // false
 *   var nested = context.enter();
 *   context[key]; // false
 *   nested();
 *   context[key]; // false
 *   exit();
 *   context[key]; // true
 *
 * @param {string} key - Property to toggle.
 * @param {boolean} state - It's default state.
 * @return {function(): function()} - Enter.
 */
function stateToggler(key, state) {
  /**
   * Construct a toggler for the bound `key`.
   *
   * @return {Function} - Exit state.
   */
  function enter() {
    var self = this;
    var current = self[key];

    self[key] = !state;

    /**
     * State canceler, cancels the state, if allowed.
     */
    function exit() {
      self[key] = current;
    }

    return exit;
  }

  return enter;
}

/*
 * Constants.
 */

var MINIMUM_RULE_LENGTH = 3;

/*
 * Character combinations.
 */

/*
 * Allowed entity options.
 */

var ENTITY_OPTIONS = {};

ENTITY_OPTIONS.true = true;
ENTITY_OPTIONS.false = true;
ENTITY_OPTIONS.numbers = true;
ENTITY_OPTIONS.escape = true;

/*
 * Allowed horizontal-rule bullet characters.
 */

var THEMATIC_BREAK_BULLETS = {};

THEMATIC_BREAK_BULLETS['*'] = true;
THEMATIC_BREAK_BULLETS['-'] = true;
THEMATIC_BREAK_BULLETS['_'] = true;

/*
 * Allowed emphasis characters.
 */

var EMPHASIS_MARKERS = {};

EMPHASIS_MARKERS['_'] = true;
EMPHASIS_MARKERS['*'] = true;

/*
 * Allowed fence markers.
 */

var FENCE_MARKERS = {};

FENCE_MARKERS['`'] = true;
FENCE_MARKERS['~'] = true;

/*
 * Allowed list-item-indent's.
 */

var LIST_ITEM_INDENTS = {};

var LIST_ITEM_TAB = 'tab';
var LIST_ITEM_ONE = '1';
var LIST_ITEM_MIXED = 'mixed';

LIST_ITEM_INDENTS[LIST_ITEM_ONE] = true;
LIST_ITEM_INDENTS[LIST_ITEM_TAB] = true;
LIST_ITEM_INDENTS[LIST_ITEM_MIXED] = true;

/**
 * Construct a new compiler.
 *
 * @example
 *   var compiler = new Compiler(new File('> foo.'));
 *
 * @constructor
 * @class {Compiler}
 * @param {File} file - Virtual file.
 * @param {Object?} [options] - Passed to
 *   `Compiler#setOptions()`.
 */
function compilerFactory(visitors) {
  var compiler = {
    options: (0, _assign2.default)({}, _defaults.stringify),

    /**
     * Set options.  Does not overwrite previously set
     * options.
     *
     * @example
     *   var compiler = new Compiler();
     *   compiler.setOptions({bullet: '*'});
     *
     * @this {Compiler}
     * @throws {Error} - When an option is invalid.
     * @param {Object?} [options] - Stringify settings.
     * @return {Compiler} - `self`.
     */
    setOptions: function setOptions(options) {
      var current = compiler.options;
      var ruleRepetition = void 0;
      var key = void 0;

      if (options === null || options === undefined) {
        options = {};
      } else if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options)) === 'object') {
        options = (0, _assign2.default)({}, options);
      } else {
        (0, _utilities.raise)(options, 'options');
      }

      for (key in _defaults.stringify) {
        _utilities.validate[(0, _typeof3.default)(current[key])](options, key, current[key], maps[key]);
      }

      ruleRepetition = options.ruleRepetition;

      if (ruleRepetition && ruleRepetition < MINIMUM_RULE_LENGTH) {
        (0, _utilities.raise)(ruleRepetition, 'options.ruleRepetition');
      }

      compiler.encode = (0, _encodeFactory2.default)(String(options.entities));
      compiler.escape = (0, _escapeFactory2.default)(options);

      compiler.options = options;

      return compiler;
    },


    enterLink: stateToggler('inLink', false),
    enterTable: stateToggler('inTable', false),

    /**
     * Shortcut and collapsed link references need no escaping
     * and encoding during the processing of child nodes (it
     * must be implied from identifier).
     *
     * This toggler turns encoding and escaping off for shortcut
     * and collapsed references.
     *
     * Implies `enterLink`.
     *
     * @param {Compiler} compiler - Compiler instance.
     * @param {LinkReference} node - LinkReference node.
     * @return {Function} - Exit state.
     */
    enterLinkReference: function enterLinkReference(compiler, node) {
      var encode = compiler.encode;
      var escape = compiler.escape;
      var exitLink = compiler.enterLink();

      if (node.referenceType === 'shortcut' || node.referenceType === 'collapsed') {
        compiler.encode = compiler.escape = function (value) {
          return value;
        };
        return function () {
          compiler.encode = encode;
          compiler.escape = escape;
          exitLink();
        };
      } else {
        return exitLink;
      }
    },


    /**
     * Visit a node.
     *
     * @example
     *   var compiler = new Compiler();
     *
     *   compiler.visit({
     *     type: 'strong',
     *     children: [{
     *       type: 'text',
     *       value: 'Foo'
     *     }]
     *   });
     *   // '**Foo**'
     *
     * @param {Object} node - Node.
     * @param {Object?} [parent] - `node`s parent.
     * @return {string} - Compiled `node`.
     */
    visit: function visit(node, parent) {
      /*
       * Fail on unknown nodes.
       */

      if (typeof visitors[node.type] !== 'function') {
        throw new Error('Missing compiler for node of type `' + node.type + '`: `' + node + '`', node);
      }

      return visitors[node.type](compiler, node, parent);
    },


    /**
     * Visit all children of `parent`.
     *
     * @example
     *   var compiler = new Compiler();
     *
     *   compiler.all({
     *     type: 'strong',
     *     children: [{
     *       type: 'text',
     *       value: 'Foo'
     *     },
     *     {
     *       type: 'text',
     *       value: 'Bar'
     *     }]
     *   });
     *   // ['Foo', 'Bar']
     *
     * @param {Object} parent - Parent node of children.
     * @return {Array.<string>} - List of compiled children.
     */
    all: function all(parent) {
      var children = parent.children;
      var values = [];
      var index = 0;
      var length = children.length;
      var mergedLength = 1;
      var node = children[0];
      var next = void 0;

      if (length === 0) {
        return values;
      }

      while (++index < length) {
        next = children[index];

        if (node.type === next.type && node.type in _utilities.MERGEABLE_NODES && (0, _utilities.mergeable)(node) && (0, _utilities.mergeable)(next)) {
          node = _utilities.MERGEABLE_NODES[node.type].call(compiler, node, next);
        } else {
          values.push(compiler.visit(node, parent));
          node = next;
          children[mergedLength++] = node;
        }
      }

      values.push(compiler.visit(node, parent));
      children.length = mergedLength;

      return values;
    },


    /**
     * Stringify the bound file.
     *
     * @example
     *   var file = new VFile('__Foo__');
     *
     *   file.namespace('mdast').tree = {
     *     type: 'strong',
     *     children: [{
     *       type: 'text',
     *       value: 'Foo'
     *     }]
     *   });
     *
     *   new Compiler(file).compile();
     *   // '**Foo**'
     *
     * @this {Compiler}
     * @return {string} - Markdown document.
     */
    compile: function compile(tree, opts) {
      compiler.setOptions(opts);
      return compiler.visit(tree);
    }
  };

  return compiler.compile;
}

/*
 * Map of applicable enum's.
 */

var maps = {
  'entities': ENTITY_OPTIONS,
  'bullet': _listBullets2.default,
  'rule': THEMATIC_BREAK_BULLETS,
  'listItemIndent': LIST_ITEM_INDENTS,
  'emphasis': EMPHASIS_MARKERS,
  'strong': EMPHASIS_MARKERS,
  'fence': FENCE_MARKERS
};

exports.default = compilerFactory;
module.exports = exports['default'];