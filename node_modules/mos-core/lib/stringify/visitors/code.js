'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pad = require('./pad');

var _pad2 = _interopRequireDefault(_pad);

var _repeatString = require('repeat-string');

var _repeatString2 = _interopRequireDefault(_repeatString);

var _longestStreak = require('longest-streak');

var _longestStreak2 = _interopRequireDefault(_longestStreak);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MINIMUM_CODE_FENCE_LENGTH = 3;
var ERROR_LIST_ITEM_INDENT = 'Cannot indent code properly. See ' + 'http://git.io/vgFvT';
var LIST_ITEM_TAB = 'tab';
/*
 * Naive fence expression.
 */

var FENCE = /([`~])\1{2}/;

exports.default = function (compiler, node, parent) {
  var value = node.value;
  var options = compiler.options;
  var marker = options.fence;
  var language = compiler.encode(node.lang || '', node);

  /*
   * Without (needed) fences.
   */

  if (!language && !options.fences && value) {
    /*
     * Throw when pedantic, in a list item which
     * isnâ€™t compiled using a tab.
     */

    if (parent && parent.type === 'listItem' && options.listItemIndent !== LIST_ITEM_TAB && options.pedantic) {
      compiler.file.fail(ERROR_LIST_ITEM_INDENT, node.position);
    }

    return (0, _pad2.default)(value, 1);
  }

  var fence = (0, _longestStreak2.default)(value, marker) + 1;

  /*
   * Fix GFM / RedCarpet bug, where fence-like characters
   * inside fenced code can exit a code-block.
   * Yes, even when the outer fence uses different
   * characters, or is longer.
   * Thus, we can only pad the code to make it work.
   */

  if (FENCE.test(value)) {
    value = (0, _pad2.default)(value, 1);
  }

  fence = (0, _repeatString2.default)(marker, Math.max(fence, MINIMUM_CODE_FENCE_LENGTH));

  return fence + language + '\n' + value + '\n' + fence;
};

module.exports = exports['default'];