'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = plugin;

var _fileExists = require('file-exists');

var _fileExists2 = _interopRequireDefault(_fileExists);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _markdownscript = require('markdownscript');

var _markdownscript2 = _interopRequireDefault(_markdownscript);

var _mdastUtilToString = require('mdast-util-to-string');

var _mdastUtilToString2 = _interopRequireDefault(_mdastUtilToString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var h2 = _markdownscript2.default.h2;
var link = _markdownscript2.default.link;
var paragraph = _markdownscript2.default.paragraph;
function plugin(mos, markdown) {
  (0, _assign2.default)(mos.scope, {
    license: compileLicense
  });

  mos.compile.pre(function (next, ast, opts) {
    ast.children = updateLicenseSection(ast.children);
    return next(ast, opts);
  });

  function compileLicense() {
    var licensePath = _path2.default.resolve(_path2.default.dirname(markdown.filePath), 'LICENSE');
    var licenseFileExists = (0, _fileExists2.default)(licensePath);

    return [h2(['License']), paragraph([licenseFileExists ? link({ url: './LICENSE' }, [markdown.pkg.license]) : markdown.pkg.license, ' Â© ', markdown.pkg.author.url ? link({ url: markdown.pkg.author.url }, [markdown.pkg.author.name]) : markdown.pkg.author.name])];
  }

  function updateLicenseSection(children) {
    if (!children.length) {
      return [];
    }
    var child = children.shift();
    if (child.type === 'heading' && (0, _mdastUtilToString2.default)(child).match(/^licen[cs]e$/i)) {
      return compileLicense().concat(removeSection(children));
    }
    return [child].concat(updateLicenseSection(children));
  }

  function removeSection(children) {
    if (!children.length) {
      return [];
    }
    var child = children.shift();
    if (~['heading', 'markdownScript', 'thematicBreak'].indexOf(child.type)) {
      return [child].concat(children);
    }
    return removeSection(children);
  }
}

plugin.attributes = {
  pkg: require('../package.json')
};
module.exports = exports['default'];