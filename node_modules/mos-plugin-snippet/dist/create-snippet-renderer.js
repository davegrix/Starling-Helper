'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _removeLastEol = require('./remove-last-eol');

var _removeLastEol2 = _interopRequireDefault(_removeLastEol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var regexes = {
  js: '// *#{anchor}\n([\\s\\S]*?)// *#',
  css: '/\\* *#{anchor} *\\*/\n([\\s\\S]*?)/\\* *# *\\*/',
  html: '<!-- *#{anchor} *-->\n([\\s\\S]*?)<!-- *# *-->',
  md: '<!-- *#{anchor} *-->\n([\\s\\S]*?)<!-- *# *-->'
};

exports.default = function (markdown) {
  var markdownDir = _path2.default.dirname(markdown.filePath);

  return function (snippetId, opts) {
    opts = opts || {};
    var snippet = parseSnippetId(snippetId);

    return new _promise2.default(function (resolve, reject) {
      _fs2.default.readFile(_path2.default.resolve(markdownDir, snippet.filePath), 'utf8', function (err, code) {
        if (err) return reject(err);

        try {
          return resolve(getSnippetFromCode(code, snippet, opts));
        } catch (err) {
          return reject(err);
        }
      });
    });
  };
};

function getSnippetFromCode(code, snippet, opts) {
  if (!snippet.anchor) {
    return fenceCode((0, _removeLastEol2.default)(code), snippet.extension) + (!opts.showSource ? '' : '\n> File [' + snippet.filePath + '](' + snippet.filePath + ')');
  }

  var regex = new RegExp(regexes[snippet.extension].replace('{anchor}', snippet.anchor));
  var matches = code.match(regex);

  if (!matches || !matches[1]) {
    throw new Error("Couldn't find anchor #" + snippet.anchor);
  }

  var codeSnippet = (0, _removeLastEol2.default)(matches[1]);

  var fencedCodeSnippet = fenceCode(codeSnippet, snippet.extension);

  if (!opts.showSource) {
    return fencedCodeSnippet;
  }

  var beforeSnippet = code.substr(0, matches.index);
  var snippetFirstLine = getLinesCount(beforeSnippet) + 1;
  var snippetLastLine = snippetFirstLine + getLinesCount(codeSnippet) - 1;

  return [fencedCodeSnippet, '> Excerpt from [' + snippet.filePath + '](' + snippet.filePath + '#L' + snippetFirstLine + '-L' + snippetLastLine + ')'].join('\n');
}

function fenceCode(code, language) {
  return ['``` ' + language, code, '```'].join('\n');
}

function getLinesCount(text) {
  var matches = text.match(/\n/g) || [];
  return matches.length + 1;
}

function parseSnippetId(id) {
  var idParts = id.split('#');
  return {
    filePath: idParts[0],
    anchor: idParts[1],
    extension: _path2.default.extname(idParts[0]).substr(1)
  };
}
module.exports = exports['default'];