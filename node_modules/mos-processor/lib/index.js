'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = mos;

var _mosCore = require('mos-core');

var _mosCore2 = _interopRequireDefault(_mosCore);

var _remi = require('remi');

var _remi2 = _interopRequireDefault(_remi);

var _remiRunner = require('remi-runner');

var _remiRunner2 = _interopRequireDefault(_remiRunner);

var _es = require('magic-hook/es5');

var _es2 = _interopRequireDefault(_es);

var _vfile = require('vfile');

var _vfile2 = _interopRequireDefault(_vfile);

var _getMarkdownMeta = require('./get-markdown-meta');

var _getMarkdownMeta2 = _interopRequireDefault(_getMarkdownMeta);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mos(md, plugins) {
  plugins = plugins || [];
  var defaultOpts = {
    listItemIndent: '1'
  };
  var processor = {
    inlineTokenizers: _mosCore2.default.inlineTokenizers.slice(),
    blockTokenizers: _mosCore2.default.blockTokenizers.slice(),
    visitors: (0, _assign2.default)({}, _mosCore2.default.visitors),
    parse: (0, _es2.default)(function (opts) {
      return _mosCore2.default.parser({
        inlineTokenizers: processor.inlineTokenizers,
        blockTokenizers: processor.blockTokenizers,
        data: _mosCore2.default.data
      })(md.vfile, opts);
    }),
    compile: (0, _es2.default)(function (ast, opts) {
      return _promise2.default.resolve(_mosCore2.default.compiler(processor.visitors)(ast, opts));
    }),
    process: function process(opts) {
      return processor.parse((0, _assign2.default)(md, { vfile: new _vfile2.default(md.content) }), opts || defaultOpts).then(function (ast) {
        return processor.compile(ast, opts || defaultOpts);
      });
    }
  };

  var register = createRegister(processor);

  return (0, _getMarkdownMeta2.default)(md.filePath).then(function (meta) {
    return register(plugins.map(function (plugin) {
      return {
        register: plugin.register || plugin,
        options: (0, _assign2.default)({}, md, meta, { options: plugin.options || {} })
      };
    }));
  }).then(function () {
    return processor;
  });
}

function createRegister(processor) {
  var registrator = (0, _remi2.default)(processor);
  registrator.hook((0, _remiRunner2.default)());
  return registrator.register;
}
module.exports = exports['default'];