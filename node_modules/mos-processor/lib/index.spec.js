'use strict';

var _mocha = require('mocha');

var _chai = require('chai');

var _markdownscript = require('markdownscript');

var _markdownscript2 = _interopRequireDefault(_markdownscript);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _plugiator = require('plugiator');

var plugiator = _interopRequireWildcard(_plugiator);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.describe)('mos', function () {
  _mocha.describe.skip('use', function () {
    (0, _mocha.it)('should register mos plugin', function (done) {
      var processor = (0, _index2.default)().use(function (md) {
        return { foo: 'foo' };
      });
      return processor.process('<!--@foo--><!--/@-->', { filePath: __filename }).then(function (newmd) {
        (0, _chai.expect)(newmd).to.eq('<!--@foo-->\nfoo\n<!--/@-->\n');
        done();
      }).catch(done);
    });
  });

  _mocha.it.skip('should process AST', function (done) {
    var ast = (0, _markdownscript2.default)('markdownScript', { code: 'foo' }, []);
    var processor = (0, _index2.default)();
    return processor.register([plugiator.anonymous(function (mos) {
      return mos.extendScope(function (md) {
        return { foo: 'foo' };
      });
    })]).then(function () {
      return processor.process(ast, { filePath: __filename });
    }).then(function (newmd) {
      (0, _chai.expect)(newmd).to.eq('<!--@foo-->\nfoo\n<!--/@-->');
      done();
    }).catch(done);
  });

  (0, _mocha.it)('should pass plugin options to the plugin', function (done) {
    return (0, _index2.default)({}, [{
      register: plugiator.anonymous(function (mos, md) {
        (0, _chai.expect)(md.options).to.eq('foo');
        done();
      }),
      options: 'foo'
    }]).catch(done);
  });

  (0, _mocha.it)('should pass default plugin options to the plugin when none passed', function (done) {
    return (0, _index2.default)({}, [plugiator.anonymous(function (mos, md) {
      (0, _chai.expect)(md.options).to.eql({});
      done();
    })]).catch(done);
  });
});