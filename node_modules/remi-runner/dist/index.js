'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _isPromise = require('is-promise');

var _isPromise2 = _interopRequireDefault(_isPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function runAsync(func, cb) {
  cb = cb || function () {};

  return function () {
    var _async = false;
    var args = arguments;

    var promise = new _promise2.default(function (resolve, reject) {
      var answer = func.apply({
        async: function async() {
          _async = true;
          return function (err, value) {
            if (err) {
              reject(err);
            } else {
              resolve(value);
            }
          };
        }
      }, Array.prototype.slice.call(args));

      if (!_async) {
        if ((0, _isPromise2.default)(answer)) {
          answer.then(resolve, reject);
        } else {
          resolve(answer);
        }
      }
    });

    promise.then(cb.bind(null, null), cb);

    return promise;
  };
};

runAsync.cb = function (func, cb) {
  return runAsync(function () {
    var args = Array.prototype.slice.call(arguments);
    if (args.length === func.length - 1) {
      args.push(this.async());
    }
    return func.apply(this, args);
  }, cb);
};

exports.default = function () {
  return function (next, target, plugin, cb) {
    var oldRegister = plugin.register;

    plugin.register = function (app, opts, next) {
      return runAsync.cb(oldRegister, next)(app, opts);
    };

    next(target, plugin, cb);
  };
};

module.exports = exports['default'];