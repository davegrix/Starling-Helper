'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = remi;

var _es = require('magic-hook/es5');

var _es2 = _interopRequireDefault(_es);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function remi(target) {
  var register = (0, _es2.default)(function (target, plugin, cb) {
    plugin.register(target, plugin.options, cb);
  });

  function registerNext(plugins, cb) {
    var plugin = plugins.shift();

    if (!plugin) return cb();

    function wrapError(err) {
      var wrapperErr = new Error('Failed to register ' + plugin.name + '. ' + err);
      wrapperErr.internalError = err;
      return wrapperErr;
    }

    register((0, _extends3.default)({}, target, {
      root: target
    }), plugin, function (err) {
      if (err) return cb(wrapError(err));

      target.registrations[plugin.name] = plugin;
      registerNext(plugins, cb);
    });
  }

  function getRegister(plugin) {
    if (typeof plugin !== 'function' && !plugin.register) {
      throw new Error('Plugin missing a register method');
    }

    // plugin is register() function
    if (typeof plugin === 'function' && !plugin.register) return plugin;

    // Required plugin
    if (plugin.register.register) return plugin.register.register;

    return plugin.register;
  }

  function pluginToRegistration(plugin) {
    var register = getRegister(plugin);

    var attributes = register.attributes;
    return (0, _extends3.default)({}, attributes, {
      register: register,
      name: attributes.name || attributes.pkg.name,
      version: attributes.version || attributes.pkg && attributes.pkg.version,
      options: (0, _extends3.default)({}, plugin.options)
    });
  }

  return {
    hook: register.pre,
    register: function register(plugins) {
      try {
        var _ret = function () {
          plugins = [].concat(plugins);
          target.registrations = target.registrations || {};

          var newRegistrations = plugins.map(pluginToRegistration).filter(function (reg) {
            return !target.registrations[reg.name];
          });

          return {
            v: new _promise2.default(function (resolve, reject) {
              var cb = function cb(err) {
                return err ? reject(err) : resolve();
              };
              registerNext(newRegistrations, cb);
            })
          };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
      } catch (err) {
        return _promise2.default.reject(err);
      }
    }
  };
}
module.exports = exports['default'];